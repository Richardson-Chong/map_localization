lio_sam:

  # Topics
  pointCloudTopic: "rslidar_points"
  # pointCloudTopic: "velodyne_points"
  imuTopic: "gnss_imu"
  odomTopic: "odometry/imu"                   # IMU pre-preintegration odometry, same frequency as IMU
  gpsTopic: "odometry/gps_manual"
  gpsRawTopic: "gps/fix"
  #FOR CHANGAN
  FOR_CHANGAN: true
  gps_CHANGAN_odom: "gnss_odom2"
  keyframenumber: 10000
  containersize: 1000

  # Frames
  lidarFrame: "base_link"
  baselinkFrame: "base_link"
  odometryFrame: "odom"
  mapFrame: "map"

  # GPS Settings
  useGps: true
  useImuHeadingInitialization: true           # if using GPS data, set to "true"
  useGpsElevation: true                     # if GPS elevation is bad, set to "false"
  gpsCovThreshold: 2.0                        # m^2, threshold for using GPS data
  poseCovThreshold: 0                      # m^2, threshold for using GPS data
  
  # Export settings
  savePCD: false                              # https://github.com/TixiaoShan/LIO-SAM/issues/3
  savePCDDirectory: "/Downloads/LOAM/"        # in your home folder, starts and ends with "/". Warning: the code deletes "LOAM" folder then recreates it. See "mapOptimization" for implementation

  # Sensor Settings
  sensor: rslidar                            # lidar sensor type, either 'velodyne' or 'ouster'
  # sensor: velodyne
  N_SCAN: 16                                  # number of lidar channel (i.e., 16, 32, 64, 128)
  Horizon_SCAN: 2016                          # lidar horizontal resolution (Velodyne:1800, Ouster:512,1024,2048)
  downsampleRate: 1                           # default: 1. Downsample your data if too many points. i.e., 16 = 64 / 4, 16 = 16 / 1
  lidarMinRange: 0.2                          # default: 1.0, minimum lidar range to be used
  lidarMaxRange: 200.0                       # default: 1000.0, maximum lidar range to be used

  #Car Setting
  HeightThreshold: -1.6

  # lego
  groundScanInd: 7
  GroundAngleThreshold: 8
  segmentTheta: 1.0472
  segmentValidPointNum: 5
  segmentValidLineNum: 3
  segmentThresholdNum: 20

  # new feature
  e_mean_thr: 0.8 #0.8
  e_max_thr: 1.2 #1.2
  occ_thr: 0.2
  corner_thr: 0.3
  surf_thr: 0.8

  # ndt_map
  map_path: "/home/a/driver_ws/src/calib_lidar_imu/ndt_map/"
  Renu: [0.994532, 0.0329455, -0.0991041,
         -0.0325707, 0.999455, 0.00539702,
         0.0992278, -0.00213961, 0.995062]
  LLA_MAP: [39.9557669, 116.3144601, 45.2712301254]
  lever_arm: [0, 0, 1]
  UsagePointNum: 15000
  #ndt_parameters
  ndt_resolution: 0.5
  NumThreads: 4
  SearchMethod: "DIRECT7"
  transformepsilon: 1e-2
  StepSize: 0.01
  SubMapNum: 48
  KeySubMapNum: 2
  SubMapInfo: "/home/a/driver_ws/src/calib_lidar_imu/ndt_map/approximate_ndt_mapping_.csv"

  # IMU Settings
  imuAccNoise: 3.9939570888238808e-03
  imuGyrNoise: 1.5636343949698187e-03
  imuAccBiasN: 6.4356659353532566e-05
  imuGyrBiasN: 3.5640318696367613e-05
  imuGravity: 9.80511
  imuRPYWeight: 0.01
  imuRate: 100.0

  # Extrinsics (lidar -> IMU)
  # extrinsicTrans: [0.76844, -0.0631438, 0.189212]
  extrinsicTrans: [-0.82, 0.0, -1.4]
  # extrinsicRot: [-1, 0, 0,
  #                 0, 1, 0,
  #                 0, 0, -1]
  # extrinsicRPY: [0,  1, 0,
  #                -1, 0, 0,
  #                 0, 0, 1]

  #最早的标定代码
  # extrinsicRot: [0.970663, 0.214124, 0.109382,
  #               -0.216584, 0.976202, 0.0109846,
  #               -0.104426,-0.0343526, 0.993939]
  # extrinsicRPY: [0.970663, 0.214124, 0.109382,
  #               -0.216584, 0.976202, 0.0109846,
  #               -0.104426,-0.0343526, 0.993939]
  
  #浙大标定代码
  # extrinsicRot: [0.970663, 0.214124, 0.109382,
  #               -0.216584, 0.976202, 0.0109846,
  #               -0.104426,-0.0343526, 0.993939]
  # extrinsicRPY: [0.970663, 0.214124, 0.109382,
  #               -0.216584, 0.976202, 0.0109846,
  #               -0.104426,-0.0343526, 0.993939]

  # #另一个标定代码NDT
  # extrinsicRot: [0.9878488, -0.1146602, -0.1049217,
  #               0.1125948, 0.9933155, -0.0254188,
  #               0.1071342,0.0132963, 0.9941552]
  # extrinsicRPY: [0.9878488, -0.1146602, -0.1049217,
  #               0.1125948, 0.9933155, -0.0254188,
  #               0.1071342,0.0132963, 0.9941552]
  
  #另一个标定代码GICP 个人认为效果更好
  extrinsicRot: [0.9946516, -0.0255009, -0.1000872,
                0.0241951, 0.9996056, -0.0142397,
                0.1000410,0.0117472, 0.9948764]
  extrinsicRPY: [0.9946516, -0.0255009, -0.1000872,
                0.0241951, 0.9996056, -0.0142397,
                0.1000410,0.0117472, 0.9948764]

  # LOAM feature threshold
  edgeThreshold: 1.0
  surfThreshold: 0.1
  edgeFeatureMinValidNum: 10
  surfFeatureMinValidNum: 100

  # voxel filter paprams
  odometrySurfLeafSize: 0.4                     # default: 0.4 - outdoor, 0.2 - indoor
  mappingCornerLeafSize: 0.2                    # default: 0.2 - outdoor, 0.1 - indoor
  mappingSurfLeafSize: 0.4                      # default: 0.4 - outdoor, 0.2 - indoor

  # robot motion constraint (in case you are using a 2D robot)
  z_tollerance: 1000                          # meters
  rotation_tollerance: 1000                     # radians

  # CPU Params
  numberOfCores: 4                              # number of cores for mapping optimization
  mappingProcessInterval: 0.15                  # seconds, regulate mapping frequency

  # Surrounding map
  surroundingkeyframeAddingDistThreshold: 1.0   # meters, regulate keyframe adding threshold
  surroundingkeyframeAddingAngleThreshold: 0.2  # radians, regulate keyframe adding threshold
  surroundingKeyframeDensity: 2.0               # meters, downsample surrounding keyframe poses   
  surroundingKeyframeSearchRadius: 50.0         # meters, within n meters scan-to-map optimization (when loop closure disabled)

  # Loop closure
  loopClosureEnableFlag: true
  loopClosureFrequency: 1.0                     # Hz, regulate loop closure constraint add frequency
  surroundingKeyframeSize: 50                   # submap size (when loop closure enabled)
  historyKeyframeSearchRadius: 15.0             # meters, key frame that is within n meters from current pose will be considerd for loop closure
  historyKeyframeSearchTimeDiff: 30.0           # seconds, key frame that is n seconds older will be considered for loop closure
  historyKeyframeSearchNum: 25                  # number of hostory key frames will be fused into a submap for loop closure
  historyKeyframeFitnessScore: 0.3              # icp threshold, the smaller the better alignment

  # Visualization
  globalMapVisualizationSearchRadius: 1000.0    # meters, global map visualization radius
  globalMapVisualizationPoseDensity: 10.0       # meters, global map visualization keyframe density
  globalMapVisualizationLeafSize: 1.0           # meters, global map visualization cloud density




# Navsat (convert GPS coordinates to Cartesian)
navsat:
  frequency: 50
  wait_for_datum: false
  delay: 0.0
  magnetic_declination_radians: 0
  yaw_offset: 0
  zero_altitude: true
  broadcast_utm_transform: false
  broadcast_utm_transform_as_parent_frame: false
  publish_filtered_gps: false

# EKF for Navsat
ekf_gps:
  publish_tf: false
  map_frame: map
  odom_frame: odom
  base_link_frame: base_link
  world_frame: odom

  frequency: 50
  two_d_mode: false
  sensor_timeout: 0.01
  # -------------------------------------
  # External IMU:
  # -------------------------------------
  # imu0: gnss_imu
  imu0: gnss_imu
  # make sure the input is aligned with ROS REP105. "imu_correct" is manually transformed by myself. EKF can also transform the data using tf between your imu and base_link
  imu0_config: [false, false, false,
                true,  true,  true,
                false, false, false,
                false, false, true,
                true,  true,  true]
  imu0_differential: false
  imu0_queue_size: 50 
  imu0_remove_gravitational_acceleration: true
  # -------------------------------------
  # Odometry (From Navsat):
  # -------------------------------------
  # odom0: odometry/gps
  odom0: odometry/gps
  odom0_config: [true,  true,  true,
                 false, false, false,
                 false, false, false,
                 false, false, false,
                 false, false, false]
  odom0_differential: false
  odom0_queue_size: 10

  #                            x     y     z     r     p     y   x_dot  y_dot  z_dot  r_dot p_dot y_dot x_ddot y_ddot z_ddot
  process_noise_covariance: [  1.0,  0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    1.0,  0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    10.0, 0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0.03, 0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0.03, 0,    0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0.1,  0,     0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0.25,  0,     0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0.25,  0,     0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0.04,  0,    0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0.01, 0,    0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0.01, 0,    0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0.5,  0,    0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0.01, 0,      0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0.01,   0,
                               0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,    0,    0,      0.015]
